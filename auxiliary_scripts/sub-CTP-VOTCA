#!/bin/bash

if [ $# -le 1 ]; then
   echo "Usage: $0 <file-name.inp> 'VOTCA EXECUTION COMMAND LINE' [#cores] [#nodes or nodename] [waitfor_jobid]"
   exit 1
fi

#if [ ! -f "$1" ]; then
#   echo "File $1 doesn't exist!"
#   exit 1
#fi

JOB=${1}      ####$( basename $( basename ${1} .com) .inp) 
VOTCA_EXE_LINE="${2}"
NCPUS=8
NODE=1
DEPEND="#" 
CURDIR=`pwd`
QUEUE=batch
TIME=180
declare -i copy_ok=0
[ $# -eq 3 ] && NCPUS=$3

[ $# -eq 4 ] && NCPUS=$3 && NODE=$4

[ $# -eq 5 ] && NCPUS=$3 && NODE=$4 && QUEUE=$5

[ $# -eq 6 ] && NCPUS=$3 && NODE=$4 && QUEUE=$5 && TIME=$6

[ $# -eq 7 ] && NCPUS=$3 && NODE=$4 && QUEUE=$5 && TIME=$6 && DEPEND="#PBS -W depend=afterany:${7}"

echo $DEPEND

qsub -V << EOF
#!/bin/bash
#PBS -l walltime=${TIME}:00:00,nodes=${NODE}:ppn=${NCPUS}
#PBS -q ${QUEUE}
#PBS -N ${JOB}
#PBS -e ${HOME}/QSUBIO
#PBS -o ${HOME}/QSUBIO
${DEPEND}
#

#shorten host name
S_HOST=\${PBS_O_HOST%.uni-muenster.de}

# activate verbose shell
set -vx
declare -i copy_ok=0
# ! need to use scp/ssh via gondor !
# create temporary input/output directory
TMPINOUT="/storage/queuehome/t/t_koch08/queue_inout/VOTCA.\${PBS_JOBID}"
ssh gondor mkdir -p \${TMPINOUT}

# create SCRATCH directory
SCRATCH="/scratch/VOTCA_CTP.\${PBS_JOBID}"
mkdir -p \${SCRATCH}

echo "Starting ${JOB} from ${CURDIR} on \${PARENT}"

# create utility scripts: ! need to use scp !
echo '[ \$# -eq 0 ] && ssh gondor "ssh'" \${HOSTNAME}"' tail -f '"/var/spool/torque/spool/\${PBS_JOBID}.OU\"" >> tail.\${PBS_JOBID}.sh
echo '[ \$# -eq 1 ] && ssh gondor "ssh'" \${HOSTNAME}"' tail -f '"\${TMPNAM}/"'\${1}"' >> tail.\${PBS_JOBID}.sh
chmod 755 tail.\${PBS_JOBID}.sh
scp tail.\${PBS_JOBID}.sh gondor:\${TMPINOUT} 
ssh gondor " scp \${TMPINOUT}/tail.\${PBS_JOBID}.sh \${S_HOST}:${CURDIR}"

# run JOB in SCRATCH directory on PARENT
cd \${SCRATCH}

# fetch input data 
ssh gondor " scp -pr \${S_HOST}:${CURDIR}/* \${TMPINOUT}"

scp -pr gondor:\${TMPINOUT}/* .  && copy_ok+=1


# set INTEL environment
#currently @gondor
export LD_LIBRARY_PATH=/opt/intel/lib/intel64:/opt/intel/mkl/lib/intel64:\${LD_LIBRARY_PATH}

# run timer
function timestop {
  maxsec=\$((${TIME}*3600))
  limit=\$((\${maxsec} - 1800))
  limit2=\$((\${maxsec}*9/10))

  if [ \$(( \$limit2 > \$limit )) == 1 ]
  then 
    limit=\$limit2
  fi

  echo "Starting Time measurement"
  echo "   Limit = \${limit} s"

  sleep \${limit}
  echo "Soft Exit!"
# put output data & clean up
  scp -p \${SCRATCH}/* gondor:\${TMPINOUT}
  ssh gondor " scp -p \${TMPINOUT}/* \${S_HOST}:${CURDIR}"
  exit
}


### Setup VOTCA environment 
PATH=/opt/files/votca_installed/bin:/opt/files/t_koch08/bin:\${PATH}
prefix=/opt/files/votca_installed/
source /opt/files/votca_installed/bin/VOTCARC_KANKRA.bash

export LD_LIBRARY_PATH=/opt/gromacs_2016/lib:/usr/lib/x86_64-linux-gnu:\${LD_LIBRARY_PATH}
export LD_LIBRARY_PATH=/opt/files/votca_installed/lib:\${LD_LIBRARY_PATH}


#convienience function to change xml option for VOTCA
changeoption(){
    sed -i "s&<\${1}.*>.*</\${1}>&<\${1}>\${2}</\${1}>&" \$3
}

changeoption_runtime(){ 
	sed -i "s&<\${1}.*>.*</\${1}>&<\${1} unit='integer'>\${2}</\${1}>&" \$3 
}

if [[ -e options_pewald3D.xml ]] ; then
	changeoption "job_file" "\${SCRATCH}/jobwriter.mps.ct.xml" options_pewald3D.xml
fi
# run VOTCA executable line is in ${2} 
timestop & ${2}

scp -p /var/spool/torque/spool/\${PBS_JOBID}.OU .
scp -p /var/spool/torque/spool/\${PBS_JOBID}.ER .

mv \${PBS_JOBID}.OU ${JOB}_\${PBS_JOBID}.OU
mv \${PBS_JOBID}.ER ${JOB}_\${PBS_JOBID}.ER

# put output data & clean up
scp -pr \${SCRATCH}/* gondor:\${TMPINOUT} && copy_ok+=1
ssh gondor " scp -pr \${TMPINOUT}/* \${S_HOST}:${CURDIR}" && copy_ok+=1

# retrieve PBS output

scp -p /var/spool/torque/spool/\${PBS_JOBID}.OU gondor:\${TMPINOUT}
scp -p /var/spool/torque/spool/\${PBS_JOBID}.ER gondor:\${TMPINOUT}
ssh  gondor " scp \${TMPINOUT}/\${PBS_JOBID}.OU \${S_HOST}:QSUBIO "
ssh  gondor " scp \${TMPINOUT}/\${PBS_JOBID}.ER \${S_HOST}:QSUBIO "

# clean up
if [[ \${copy_ok} == 3 ]]; then 
	rm -r  \${SCRATCH}/*
	rmdir \${SCRATCH}
	cd 
	rm -f tail.\${PBS_JOBID}.sh
	ssh gondor "rm \${TMPINOUT}/*"
	ssh gondor "rmdir \${TMPINOUT}"
	ssh gondor "ssh \${S_HOST} rm ${CURDIR}/tail.\${PBS_JOBID}.sh"
fi 
EOF
