#!/bin/bash
echo  '###  VOTCA build order : '
echo  '###  The steps 1) to 9) are needed to perform VOTCA-based kinetic Monte Carlo simulations '
echo  '###  The steps 10) to 15) are optional alternatives to replace the data for emultipole.'
echo  '###  The inputfiles for the following VOTCA commands can be produced by the charge_transport_package.f90' 
echo  '###   flags:  -e votca exection modus  -o optionfilename ; -f statefilename ; -s mapping file ; -t numbers of CPUS for execution '
echo  '###   ctp_run can also be replaced by xtp_run '
echo  '#!/bin/bash'
echo  ' '
echo  ' ### 1) create GROMACS *.tpr'
echo  ' /opt/gromacs-5.0.4-d-WP/bin/grompp_d  -c gromacs_outputfile.gro   -p  fake_topology_ gromacs_outputfile.top  -f   gromp.mdp'
echo  ' ### 2) GROMACS *.tpr'
echo  ' /opt/gromacs-5.0.4-d-WP/bin/mdrun_d  -s topol.tpr -x  gromacs_outputfile.xtc '
echo  ' '
echo  ' ### 3a) Mapping'
echo  ' ctp_map -t topol.tpr -c    gromacs_outputfile.xtc   -s    map.xml    -f    statefile.sql'
echo  ' ### 3b) System.xml'
echo  ' cp   map.xml     system.xml'
echo  ' ### 4) Neighbor list'
echo  ' ctp_run -e neighborlist -o  neighbours_constrained_VOTCA.xml     -f    statefile.sql'
echo  ' '
echo  ' ### 5)  Site energies'
echo  ' ctp_run -e emultipole -o  options_VOTCA.xml  -f    statefile.sql   -t 72 '
echo  ' ctp_run -e einternal -o  options_VOTCA.xml  -f    statefile.sql   -t 72 '
echo  ' ctp_run -e eoutersphere -o  options_VOTCA.xml  -f    statefile.sql   -t 72 '
echo  ' '
echo  ' ### 6) Transfer integrals using ZINDO-based MOO method '
echo  ' ctp_run -e izindo -o  options_VOTCA.xml  -f    statefile.sql   -t 72 '
echo  ' '
echo  ' ### 7)  Rates'
echo  ' ctp_run -e rates -o  options_VOTCA.xml  -f    statefile.sql   -t 72 '
echo  ' '
echo  ' ### 9) Charge Transport'
echo  ' # kmc_run -e kmcmultiple -o  options_VOTCA.xml  -f    statefile.sql'
echo  ' '
echo  ' '
echo  ' ### optional: pewald3D '
echo  ' # where required: create mps files ctp_tools -e log2mps -o options_VOTCA.xml  and  ctp_tools -e molpol -o options_VOTCA.xml '
echo  ' ### 10) stateserver' 
echo  ' # ctp_run -e stateserver -o options_stateserver.xml -f    statefile.sql'
echo  ' ### 11) jobwriter '
echo  ' # ctp_run -e jobwriter -o options_jobwriter.xml -f    statefile.sql'
echo  ' ### 12) ewald3D background polarization  '
echo  ' # ctp_run -e ewdbgpol -o options_ewdbgpol.xml -f    statefile.sql   -t 72  '
echo  ' ### 13) pewald3D '
echo  ' # ctp_parallel -e pewald3d -o options_pewald3d.xml -f /absolute/path/to/state.sql -s 0 -t 72  -c 8 '
echo  ' ### 14) xqmultipole '
echo  ' # xtp_parallel -e xqmultipole -f    statefile.sql    -o xqmultipole.xml -s 0 -t 1 -c 1000 -j "run" > xqmultipole.log '

echo  ' ### 15) xmultipole '
echo  ' xtp_run -e xmultipole -o  options_VOTCA.xml  -f    statefile.sql'
echo  ' '