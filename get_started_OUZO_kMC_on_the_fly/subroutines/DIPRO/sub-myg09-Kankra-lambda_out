#!/bin/bash

 if [ $# -eq 0 ]; then
    echo "Usage: $0 <Basisordner> <lambad_out_el_filename> <lambda_out_lo_filename> [waitfor_jobid]"
    exit 1
 elif [ $# -le 2 ]; then
    echo "Usage: $0 <Basisordner> <lambad_out_el_filename> <lambda_out_lo_filename> [waitfor_jobid]"
    exit 1
 fi

 if [ ! -d "./lambda_out/$1" ]; then
    echo "directory ./lambda_out/$1 doesn't exist!"
    exit 1
 fi

 if [ ! -d "./lambda_out/" ]; then
    echo "directory ./lambda_out/ doesn't exist!"
    exit 1
 fi

 JOB=${1%/}
 NAM=${1%/}
 LAMBDA_OUT_EL=${2}
 LAMBDA_OUT_LO=${3}
 KEY=".ssh/stahs"

 DEPEND="#" 
 if [ $# -ge 4 ]
 then
      DEPEND="#PBS -W depend=afterany:$4"
 fi

 CURDIR=`pwd`


 #MEM=`cat $1 | grep -i %mem | cut -f2 -d"="`
 #[ -e "$MEM" ] && MEM=1GB
 #echo MEM = $MEM

 #PPN=`cat $1 | grep -i %nproc | cut -f2 -d"="`
 #[ -e "$PPN" ] && PPN=1
 PPN=8
 echo PPN = $PPN

#PRE=$(pwd | sed s/${USER}/,/ | cut -d',' -f1,1)

#echo $PRE

#exit
#cat  > g09_test.pbs << EOF
 qsub -V << EOF
#!/bin/bash
#PBS -l nodes=1:ppn=${PPN}
##PBS -l walltime=00:00:10:00
##PBS -l mem=${MEM}
#PBS -q moria
#PBS -N ${NAM}
#PBS -e ${HOME}/QSUBIO
#PBS -o ${HOME}/QSUBIO
##PBS -m e
${DEPEND}
#

#shorten host name
S_HOST=\${PBS_O_HOST%.uni-muenster.de}

# activate verbose shell
 set -vx

# ! need to use scp/ssh via gondor !
# create temporary input/output directory
#TMPINOUT="/exports/queuehome/m/mboec_02/queue_inout/g09.\${PBS_JOBID}"
 TMPINOUT="queue_inout/lambda_out.\${PBS_JOBID}"
 ssh gondor mkdir -p \${TMPINOUT}

# create SCRATCH directory
 SCRATCH="/scratch/lambda_out.\${PBS_JOBID}"
 mkdir -p \${SCRATCH}


 echo "Starting ${JOB} from ${CURDIR} on \${PARENT}"




# run JOB in SCRATCH directory on PARENT
 cd \${SCRATCH}
 #touch _START_


# fetch input data 
#cp -p ${CURDIR}/${JOB}/ .
 ssh gondor " scp -i ${KEY} -pr \${S_HOST}:${CURDIR}/lambda_out/${JOB}/ \${TMPINOUT}"
 ssh gondor " scp -i ${KEY} -pr \${S_HOST}:${CURDIR}/partial_charges \${TMPINOUT}"
 ssh gondor " scp -i ${KEY} -pr \${S_HOST}:${CURDIR}/lambda_out_und_dE_out_aus_xyz_q_file \${TMPINOUT}"
 ssh gondor " scp -i ${KEY} -pr \${S_HOST}:${CURDIR}/aufruf.out \${TMPINOUT}"

 scp -pr gondor:\${TMPINOUT}/* .

# set GAUSSIAN environment
 # rev. D01 @gondor
 #  export g09root=/opt/intel
 #  export GAUSS_EXEDIR=/opt/intel/g09   
 #  export PATH=/opt/intel/g09:$PATH

# set INTEL environment
 #currently @gondor
 #  export LD_LIBRARY_PATH=/opt/intel/lib/intel64:/opt/intel/mkl/lib/intel64

 #wechsle in Basisordner
 #cd ${JOB}/
 mkdir xyz_q_Dateien
 mkdir xyz_q_Dateien/lambda_out_xyz_q_pairs
 cp ./${JOB}/input_file_lambda_out .
 chmod 755 input_file_lambda_out
 ./input_file_lambda_out
 touch ${LAMBDA_OUT_LO}
 touch ${LAMBDA_OUT_EL}
 lines_file_1=\$( wc -l ${LAMBDA_OUT_LO} ); lines_file_1=\${lines_file_1% *}
 lines_file_2=\$( wc -l ${LAMBDA_OUT_EL} ); lines_file_2=\${lines_file_2% *}
 lines_input_file=\$( wc -l input_file_lambda_out ); lines_input_file=\${lines_input_file% *}

 # waiting for the processes startet by the "lines_input_file" to finish
 while [ \$(( \${lines_file_1} + \${lines_file_2} )) -lt \${lines_input_file} ]
  do
      sleep 3
      lines_file_1=\$( wc -l ${LAMBDA_OUT_LO} ); lines_file_1=\${lines_file_1% *}
      lines_file_2=\$( wc -l ${LAMBDA_OUT_EL} ); lines_file_2=\${lines_file_2% *}
  done 

#file_EL=\$( cat ${LAMBDA_OUT_EL} )
#file_LO=\$( cat ${LAMBDA_OUT_LO} )
 
# put output data & clean up
 scp -pr \${SCRATCH}/* gondor:\${TMPINOUT}
 ssh gondor " scp -i ${KEY} -pr \${TMPINOUT}/xyz_q_Dateien/lambda_out_xyz_q_pairs/* \${S_HOST}:${CURDIR}/xyz_q_Dateien/lambda_out_xyz_q_pairs/"
 ssh gondor " scp -i ${KEY} -pr \${TMPINOUT}/${LAMBDA_OUT_EL} \${S_HOST}:${CURDIR}/lambda_out/${JOB}/"
 ssh gondor " scp -i ${KEY} -pr \${TMPINOUT}/${LAMBDA_OUT_LO} \${S_HOST}:${CURDIR}/lambda_out/${JOB}/"
 ssh gondor " ssh -i ${KEY} \${S_HOST} \"cat ${CURDIR}/lambda_out/${JOB}/${LAMBDA_OUT_EL} >> ${CURDIR}/${LAMBDA_OUT_EL} \" "
 ssh gondor " ssh -i ${KEY} \${S_HOST} \"cat ${CURDIR}/lambda_out/${JOB}/${LAMBDA_OUT_LO} >> ${CURDIR}/${LAMBDA_OUT_LO} \" "


#rm -r   \${SCRATCH}/*
#rmdir \${SCRATCH}



# retrieve PBS output
 scp -p /var/spool/torque/spool/\${PBS_JOBID}.OU gondor:\${TMPINOUT}
 scp -p /var/spool/torque/spool/\${PBS_JOBID}.ER gondor:\${TMPINOUT}

 ssh  gondor " scp -i ${KEY} \${TMPINOUT}/\${PBS_JOBID}.OU \${S_HOST}:${CURDIR}/${JOB}/ "
 ssh  gondor " scp -i ${KEY} \${TMPINOUT}/\${PBS_JOBID}.ER \${S_HOST}:${CURDIR}/${JOB}/ "

 ssh gondor " rm -r \${TMPINOUT}/* "
 ssh gondor " rmdir \${TMPINOUT} "


EOF

